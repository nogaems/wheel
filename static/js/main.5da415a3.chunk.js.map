{"version":3,"sources":["utils.js","store.js","items.js","history.js","wheel.js","App.js","reportWebVitals.js","index.js"],"names":["title","a","encoder","TextEncoder","data","encode","crypto","subtle","digest","hash","assignColors","setter","digestTitle","then","hex","Array","from","Uint8Array","map","b","toString","padStart","join","slice","length","fg","bg","Number","parseInt","toPercent","prob","toFixed","calcUnassignedProbability","items","reduce","previous","weight","isAlreadyAdded","item","list","filter","getRandomInt","min","max","Math","ceil","floor","random","StoreContext","createContext","StoreProvider","children","useState","JSON","parse","localStorage","getItem","setItems","history","setHistory","unassignedProbability","setUnassignedProbability","store","useEffect","newUnassignedProbability","setItem","stringify","Provider","value","minProb","probStep","isFulfilled","abs","Item","index","useContext","deleteConfirmOpened","setDeleteConfirmOpened","editOpened","setEditOpened","maxWeight","newTitle","setNewTitle","newWeight","setNewWeight","newColors","setNewColors","error","setError","saving","setSaving","newItems","Grid","Row","Column","width","Label","style","color","backgroundColor","alignSelf","size","Button","Group","compact","floated","icon","onClick","Confirm","open","onConfirm","splice","onCancel","Modal","onClose","Header","Content","Form","inline","Field","type","control","defaultValue","label","onChange","e","target","step","parseFloat","Message","content","Dimmer","active","Loader","Actions","labelPosition","positive","Divider","fitted","ItemAddForm","setTitle","setWeight","colors","setColors","addEnabled","setAddEnabled","weightFloat","debouncedSetColors","useCallback","debounce","onSubmit","grouped","Input","placeholder","disabled","ItemList","eraseConfirmOpened","setEraseConfirmOpened","filePickerOpened","setFilePickerOpened","filePickerError","setFilePickerError","fileToImport","setFileToImport","onImport","fetch","res","json","catch","elements","Segment","raised","Dropdown","button","className","fluid","textAlign","Menu","text","serialized","file","Blob","document","createElement","url","URL","createObjectURL","href","download","body","appendChild","click","setTimeout","removeChild","window","revokeObjectURL","as","attached","onOpen","Icon","name","Container","Description","inverted","section","HistoryItem","ts","columns","Date","toLocaleString","tsToString","History","Wheel","innerWidth","height","result","setResult","resultModalOpen","setResultModalOpen","PI","offset","setOffset","isSpinning","setIsSpinning","canvasRef","useRef","spin","targ_sector","S0","t1","f","targ_angle","prev","next","S_targ","F","sqrt","context","current","getContext","start","performance","now","requestAnimationFrame","animate","time","angle","t","v_peak","calcAngle","draw","histItem","ctx","initialAngle","border","borderColor","arrowColorLeft","arrowColorRight","arrowW","arrowH","r","cx","cy","desiredTextW","round","minTextH","maxTextH","setTransform","clearRect","translate","rotate","fillStyle","beginPath","arc","closePath","fill","actualMaxTextH","sin","textMeasureIterationNum","log2","strokeStype","lineTo","stroke","textH","i","font","textW","measureText","actualApproximateTextH","fillText","strokeStyle","moveTo","Rail","internal","position","close","ref","sum","weightedRandom","alert","App","horizontal","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.5da415a3.chunk.js","sourcesContent":["async function digestTitle(title) {\n  const encoder = new TextEncoder();\n  const data = encoder.encode(title);\n  const hash = await crypto.subtle.digest(\"SHA-256\", data);\n  return hash;\n}\n\nfunction assignColors(title, setter) {\n  digestTitle(title).then((hash) => {\n    const hashArray = Array.from(new Uint8Array(hash));\n    let hex = hashArray.map((b) => b.toString(16).padStart(2, \"0\")).join(\"\");\n    hex = hex.slice(hex.length - 6, hex.length);\n    const fg = `#${hex}`;\n    const bg = `#${(~Number.parseInt(hex, 16) & 0xffffff).toString(16)}`;\n    setter([fg, bg]);\n  });\n}\n\nconst toPercent = (prob) => `${(prob * 100).toFixed(2)}%`;\n\nconst calcUnassignedProbability = (items) => {\n  return (\n    1 -\n    items.reduce((previous, { weight: current }) => {\n      return previous + current;\n    }, 0)\n  );\n};\n\nconst isAlreadyAdded = (item, list) => {\n  return list.filter(({ title }) => item === title).length === 1;\n};\n\nconst weightedRandom = (items) => {\n  let sum = 0;\n  let r = Math.random();\n  for (let index = 0; index < items.length; index++) {\n    let { title, weight } = items[index];\n    sum += weight;\n    if (r <= sum) return { title, weight, index };\n  }\n};\n\nconst getRandomInt = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\n};\n\nexport {\n  assignColors,\n  toPercent,\n  calcUnassignedProbability,\n  isAlreadyAdded,\n  weightedRandom,\n  getRandomInt,\n};\n","import { createContext, useEffect, useState } from \"react\";\nimport { calcUnassignedProbability } from \"./utils\";\n\nexport const StoreContext = createContext(null);\n\nexport default function StoreProvider({ children }) {\n  const [items, setItems] = useState(\n    JSON.parse(localStorage.getItem(\"items\")) || []\n  );\n  const [history, setHistory] = useState(\n    JSON.parse(localStorage.getItem(\"history\")) || []\n  );\n  const [unassignedProbability, setUnassignedProbability] = useState(\n    calcUnassignedProbability(items)\n  );\n\n  const store = {\n    items: [items, setItems],\n    history: [history, setHistory],\n    unassignedProbability,\n  };\n\n  useEffect(() => {\n    const newUnassignedProbability = calcUnassignedProbability(items);\n    setUnassignedProbability(newUnassignedProbability);\n    localStorage.setItem(\"items\", JSON.stringify(items));\n  }, [items]);\n  useEffect(() => {\n    localStorage.setItem(\"history\", JSON.stringify(history));\n  }, [history]);\n\n  return (\n    <StoreContext.Provider value={store}>{children}</StoreContext.Provider>\n  );\n}\n","import { debounce } from \"lodash\";\nimport { useCallback, useContext, useEffect, useState } from \"react\";\nimport {\n  Button,\n  Divider,\n  Form,\n  Grid,\n  Header,\n  Label,\n  Message,\n  Segment,\n  Confirm,\n  Dropdown,\n  Modal,\n  Icon,\n  Container,\n  Dimmer,\n  Loader,\n} from \"semantic-ui-react\";\n\nimport { StoreContext } from \"./store\";\nimport { assignColors, toPercent, isAlreadyAdded } from \"./utils\";\n\nexport const minProb = 0.0001;\nexport const probStep = 0.0001;\nexport const epsilon = 0.0001;\n\nexport const isFulfilled = (unassignedProbability) => {\n  return Math.abs(unassignedProbability) < epsilon;\n};\n\nconst Item = ({ index, title, fg, bg, weight }) => {\n  const {\n    items: [items, setItems],\n    unassignedProbability,\n  } = useContext(StoreContext);\n\n  const [deleteConfirmOpened, setDeleteConfirmOpened] = useState(false);\n  const [editOpened, setEditOpened] = useState(false);\n\n  const maxWeight = weight + unassignedProbability;\n\n  const [newTitle, setNewTitle] = useState(title);\n  const [newWeight, setNewWeight] = useState(weight);\n  const [newColors, setNewColors] = useState([null, null]);\n\n  const [error, setError] = useState(\"\");\n  const [saving, setSaving] = useState(false);\n\n  const onEdit = () => {\n    setSaving(true);\n    assignColors(newTitle, setNewColors);\n  };\n\n  useEffect(() => {\n    if (title !== newTitle && isAlreadyAdded(newTitle, items)) {\n      setSaving(false);\n      setError(\"It's already on the list\");\n      return;\n    }\n    if (!newColors[0] || !newColors[1]) return;\n    const newItems = [...items];\n    const item = newItems[index];\n    item.title = newTitle;\n    item.weight = newWeight;\n    [item.fg, item.bg] = newColors;\n    setItems(newItems);\n    setSaving(false);\n    setEditOpened(false);\n    // eslint-disable-next-line\n  }, [newColors]);\n\n  const onDelete = () => {\n    const newItems = items;\n    newItems.splice(index, 1);\n    setItems([...newItems]);\n    setDeleteConfirmOpened(false);\n  };\n\n  return (\n    <>\n      <Grid.Row>\n        <Grid.Column width={14}>\n          <Label\n            style={{ color: fg, backgroundColor: bg, alignSelf: \"flex-start\" }}\n            size=\"large\"\n          >\n            {`${index + 1}) ${title} (${toPercent(weight)})`}\n          </Label>\n        </Grid.Column>\n        <Grid.Column width={2}>\n          <Button.Group compact floated=\"right\">\n            <Button\n              size=\"mini\"\n              icon=\"edit outline\"\n              onClick={() => setEditOpened(true)}\n            />\n            <Button\n              size=\"mini\"\n              color=\"red\"\n              icon=\"delete\"\n              onClick={() => setDeleteConfirmOpened(true)}\n            />\n            <Confirm\n              open={deleteConfirmOpened}\n              onConfirm={onDelete}\n              onCancel={() => setDeleteConfirmOpened(false)}\n            />\n            <Modal onClose={() => setEditOpened(false)} open={editOpened}>\n              <Modal.Header>Edit</Modal.Header>\n              <Modal.Content>\n                <Form error>\n                  <Form.Group inline>\n                    <Form.Field\n                      type=\"text\"\n                      control=\"input\"\n                      defaultValue={title}\n                      label=\"Title\"\n                      onChange={(e) => setNewTitle(e.target.value)}\n                    />\n                    <Form.Field\n                      type=\"range\"\n                      control=\"input\"\n                      label=\"Probability\"\n                      min={minProb}\n                      max={maxWeight}\n                      step={probStep}\n                      defaultValue={weight}\n                      onChange={(e) =>\n                        setNewWeight(Number.parseFloat(e.target.value))\n                      }\n                    />\n                    {toPercent(newWeight)}\n                  </Form.Group>\n                  {error && <Message error content={error} />}\n                </Form>\n                <Dimmer active={saving}>\n                  <Loader content=\"Saving\" />\n                </Dimmer>\n              </Modal.Content>\n              <Modal.Actions>\n                <Button color=\"black\" onClick={() => setEditOpened(false)}>\n                  Cancel\n                </Button>\n                <Button\n                  content=\"Save\"\n                  labelPosition=\"right\"\n                  icon=\"checkmark\"\n                  onClick={() => onEdit()}\n                  positive\n                />\n              </Modal.Actions>\n            </Modal>\n          </Button.Group>\n        </Grid.Column>\n      </Grid.Row>\n      <Divider fitted />\n    </>\n  );\n};\n\nconst ItemAddForm = () => {\n  const {\n    items: [items, setItems],\n    unassignedProbability,\n  } = useContext(StoreContext);\n\n  const [title, setTitle] = useState(\"\");\n  const [weight, setWeight] = useState(minProb);\n  const [colors, setColors] = useState([null, null]);\n  const [addEnabled, setAddEnabled] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const weightFloat = Number.parseFloat(weight);\n    if (!(title && weightFloat)) {\n      setAddEnabled(false);\n      return;\n    }\n    if (isFulfilled(unassignedProbability)) {\n      setError(\"The total probability of specified events has reached 100%\");\n      setAddEnabled(false);\n      return;\n    }\n    const [fg, bg] = colors;\n    if (!(fg && bg)) return;\n    // eslint-disable-next-line\n  }, [title, weight, colors, unassignedProbability]);\n\n  // eslint-disable-next-line\n  const debouncedSetColors = useCallback(\n    debounce((title) => {\n      if (isAlreadyAdded(title, items)) {\n        setError(\"It's already on the list\");\n        return;\n      }\n      assignColors(title, setColors);\n      setAddEnabled(true);\n    }, 300),\n    [items]\n  );\n\n  const onTitleChange = (e) => {\n    setAddEnabled(false);\n    const value = e.target.value;\n    setTitle(value);\n    if (!value) {\n      setError(\"Title must be non-empty\");\n      return;\n    } else {\n      setError(\"\");\n    }\n    debouncedSetColors(value);\n  };\n\n  const onAdd = () => {\n    const [fg, bg] = colors;\n    const item = { title, weight, fg, bg };\n    setItems([...items, item]);\n    setTitle(\"\");\n    setWeight(minProb);\n    setAddEnabled(false);\n    setError(null);\n  };\n\n  return (\n    <Form onSubmit={onAdd} error>\n      <Form.Group grouped>\n        <Form.Input\n          type=\"text\"\n          label=\"Title\"\n          placeholder=\"thing to do\"\n          value={title}\n          onChange={onTitleChange}\n        />\n        <Form.Field\n          type=\"range\"\n          control=\"input\"\n          min={minProb}\n          max={unassignedProbability}\n          step={probStep}\n          label=\"Probability\"\n          value={weight}\n          onChange={(e) => setWeight(Number.parseFloat(e.target.value))}\n        />\n        {`${toPercent(weight)}`}\n        <Form.Button\n          positive\n          size=\"large\"\n          disabled={!addEnabled}\n          icon=\"add\"\n        />{\" \"}\n      </Form.Group>\n      {error && <Message error content={error} />}\n    </Form>\n  );\n};\n\nconst ItemList = () => {\n  const {\n    items: [items, setItems],\n    history: [history, setHistory],\n  } = useContext(StoreContext);\n\n  const [eraseConfirmOpened, setEraseConfirmOpened] = useState(false);\n  const [filePickerOpened, setFilePickerOpened] = useState(false);\n  const [filePickerError, setFilePickerError] = useState(\"\");\n  const [fileToImport, setFileToImport] = useState(null);\n\n  const onImport = () => {\n    if (!fileToImport) {\n      setFilePickerError(\"You should pick a file\");\n      return;\n    }\n    fetch(fileToImport)\n      .then((res) => res.json())\n      .then(({ items, history }) => {\n        setItems(items);\n        setHistory(history);\n        setFilePickerOpened(false);\n      })\n      .catch(() => {\n        setFilePickerError(\n          \"Failed to fetch specified URL or parse its contents as JSON\"\n        );\n      });\n  };\n\n  const onExport = () => {\n    const data = { items, history };\n    const serialized = JSON.stringify(data);\n    const file = new Blob([serialized], { type: \"application/json\" });\n    let a = document.createElement(\"a\");\n    const url = URL.createObjectURL(file);\n    a.href = url;\n    a.download = \"wheel.json\";\n    document.body.appendChild(a);\n    a.click();\n    setTimeout(function () {\n      document.body.removeChild(a);\n      window.URL.revokeObjectURL(url);\n    }, 0);\n  };\n\n  const onErase = () => {\n    setEraseConfirmOpened(false);\n    setItems([]);\n    setHistory([]);\n  };\n\n  const elements = items.map(({ title, fg, bg, weight }, index) => (\n    <Item\n      key={index}\n      index={index}\n      title={title}\n      fg={fg}\n      bg={bg}\n      weight={weight}\n    />\n  ));\n\n  return (\n    <Segment raised>\n      <Grid>\n        <Grid.Column width={14}>\n          <Header\n            size=\"medium\"\n            content=\"The things that are about to happen:\"\n          />\n        </Grid.Column>\n        <Grid.Column width={2}>\n          <Dropdown\n            button\n            icon=\"wrench\"\n            className=\"icon\"\n            fluid\n            style={{ textAlign: \"center\" }}\n          >\n            <Dropdown.Menu>\n              <Dropdown.Item\n                icon=\"download\"\n                text=\"Import\"\n                onClick={() => setFilePickerOpened(true)}\n              />\n              <Dropdown.Item icon=\"upload\" text=\"Export\" onClick={onExport} />\n              <Dropdown.Item\n                icon=\"eraser\"\n                text=\"Erase\"\n                onClick={() => setEraseConfirmOpened(true)}\n                as={Button}\n                fluid\n                attached=\"bottom\"\n                color=\"red\"\n              />\n              <Confirm\n                open={eraseConfirmOpened}\n                onCancel={() => setEraseConfirmOpened(false)}\n                onConfirm={onErase}\n              ></Confirm>\n              <Modal\n                open={filePickerOpened}\n                onClose={() => setFilePickerOpened(false)}\n                onOpen={() => setFilePickerOpened(true)}\n              >\n                <Header icon>\n                  <Icon name=\"download\" />\n                  Pick a file\n                </Header>\n                <Modal.Content>\n                  <Container textAlign=\"center\">\n                    <Modal.Description>\n                      <p>\n                        Due to the restrictions caused by security reasons you\n                        cannot use local files directly and you have to upload\n                        it somewhere first.\n                      </p>\n                      <p>\n                        Note that there is no input file validation performed,\n                        so modifying it would be on your own risk.\n                      </p>\n                    </Modal.Description>\n                    <Divider />\n                    <Form error onSubmit={() => onImport()}>\n                      <Form.Input\n                        type=\"text\"\n                        label=\"Link:\"\n                        placeholder=\"https://example.com/wheel.json\"\n                        value={fileToImport}\n                        onChange={(e) => setFileToImport(e.target.value)}\n                      />\n                      {filePickerError && (\n                        <Message error content={filePickerError} />\n                      )}\n                    </Form>\n                  </Container>\n                </Modal.Content>\n                <Modal.Actions>\n                  <Button\n                    color=\"red\"\n                    inverted\n                    onClick={() => setFilePickerOpened(false)}\n                  >\n                    <Icon name=\"remove\" /> Cancel\n                  </Button>\n                  <Button color=\"green\" inverted onClick={() => onImport()}>\n                    <Icon name=\"checkmark\" /> OK\n                  </Button>\n                </Modal.Actions>\n              </Modal>\n            </Dropdown.Menu>\n          </Dropdown>\n        </Grid.Column>\n      </Grid>\n      <Divider section />\n      {elements.length === 0 ? (\n        <Header\n          textAlign=\"center\"\n          size=\"tiny\"\n          content=\"Nothing's on the list yet\"\n        />\n      ) : (\n        <Grid>{elements}</Grid>\n      )}\n      <ItemAddForm />\n    </Segment>\n  );\n};\nexport { ItemList };\n","import { StoreContext } from \"./store.js\";\nimport { toPercent } from \"./utils.js\";\nimport { useContext } from \"react\";\nimport { Header, Container, Segment, Grid } from \"semantic-ui-react\";\n\nconst HistoryItem = ({ ts, title, weight }) => {\n  const tsToString = (ts) => {\n    const date = new Date(ts);\n    return date.toLocaleString();\n  };\n\n  return (\n    <Grid.Row columns={1}>\n      <Grid.Column>\n        {`${tsToString(ts)}: ${title} (${toPercent(weight)})`}\n      </Grid.Column>\n    </Grid.Row>\n  );\n};\n\nconst History = () => {\n  const {\n    history: [history],\n  } = useContext(StoreContext);\n  const elements = history.map(({ ts, title, weight }) => (\n    <HistoryItem\n      key={Math.floor(ts * Math.random())}\n      ts={ts}\n      title={title}\n      weight={weight}\n    />\n  ));\n  return (\n    <Segment raised>\n      <Container>\n        <Header size=\"medium\" textAlign=\"center\" content=\"History of spins:\" />\n        {elements.length === 0 ? (\n          <Header textAlign=\"center\" size=\"tiny\" content=\"Empty\" />\n        ) : (\n          <Grid>{elements}</Grid>\n        )}\n      </Container>\n    </Segment>\n  );\n};\n\nexport { History };\n","import { useContext, useEffect, useRef, useState } from \"react\";\nimport { Button, Header, Modal, Segment, Rail } from \"semantic-ui-react\";\n\nimport { isFulfilled } from \"./items\";\nimport { StoreContext } from \"./store\";\nimport { getRandomInt, toPercent, weightedRandom } from \"./utils\";\n\nconst Wheel = () => {\n  const {\n    items: [items],\n    history: [history, setHistory],\n    unassignedProbability,\n  } = useContext(StoreContext);\n\n  const width = Math.floor(window.innerWidth * 0.5);\n  const height = width;\n\n  // const [width, height] = [850, 850];\n\n  const [result, setResult] = useState({ title: null, weight: null });\n  const [resultModalOpen, setResultModalOpen] = useState(false);\n\n  const [offset, setOffset] = useState(Math.PI);\n  const [isSpinning, setIsSpinning] = useState(false);\n\n  const canvasRef = useRef(null);\n\n  const onSpin = () => {\n    if (isSpinning) return;\n    if (!isFulfilled(unassignedProbability)) {\n      // TODO: this must appear beneath the list to the right as a warning\n      alert(\n        `You have to fully assign the remaining probability of ${toPercent(\n          unassignedProbability\n        )} before spinning!`\n      );\n      return;\n    }\n    const { title, weight, index } = weightedRandom(items);\n    setResult({ title, weight });\n    spin(index);\n  };\n\n  const spin = (targ_sector) => {\n    // Building somewhat realistic model of the process of spinning wheel is rather complicated\n    // and is not the aim of this project by any means.\n    // To make things look realistic at some level, I use a simplified approach to this\n    // problem by reducing the wheel spinning process to the case of motion with constant\n    // acceleration and utilize a modified version of Torricelli's equation for that.\n\n    // we need this because of floating point calculations\n    const eps = 0.001;\n    // the position (in radians) where we start to spin\n    const S0 = offset;\n    // the interval (in ms) of applying force, basically for how long the wheel accelerates\n    const t1 = getRandomInt(200, 700);\n    // friction force coefficient, don't really try to make much sense of it,\n    // it just defines how long it's gonna take the wheel to stop\n    const f = 6e-7;\n\n    const targ_angle =\n      Math.PI *\n      (1 -\n        2 *\n          (items\n            .slice(0, targ_sector)\n            .map(({ weight }) => weight)\n            .reduce((prev, next) => prev + next, 0) +\n            items[targ_sector].weight * Math.random()));\n\n    // here we randomly add 8-15 more full spins so it looks more realistic\n    const S_targ = getRandomInt(8, 16) * (Math.PI * 2) + targ_angle;\n    const F =\n      ((1 / 2) *\n        (Math.sqrt(f * f * (t1 * t1) + 8 * (S_targ - S0) * f) - f * t1)) /\n      t1;\n\n    const calcAngle = (t) => {\n      if (t < t1) {\n        return (F * t * t) / 2 + S0;\n      } else {\n        const S_peak = (F * t1 * t1) / 2 + S0;\n        const v_peak = F * t1;\n        const t_end = t1 + v_peak / f;\n        if (t > t_end) return S_targ;\n        return (-f * (t - t1) * (t - t1)) / 2 + v_peak * (t - t1) + S_peak;\n      }\n    };\n\n    const canvas = canvasRef.current;\n    const context = canvas.getContext(\"2d\");\n\n    const start = performance.now();\n    setIsSpinning(true);\n\n    window.requestAnimationFrame(function animate(time) {\n      const t = time - start;\n      const angle = calcAngle(t);\n      draw(context, angle);\n      if (Math.abs(S_targ - angle) > eps) {\n        window.requestAnimationFrame(animate);\n      } else {\n        // the spinning is over\n        setOffset(targ_angle);\n        setResultModalOpen(true);\n        setIsSpinning(false);\n        const { title, weight } = items[targ_sector];\n        const histItem = { ts: Date.parse(Date()), title, weight };\n        setHistory([histItem, ...history]);\n      }\n    });\n  };\n\n  const draw = (ctx, initialAngle = 0) => {\n    const offset = width / 60;\n    const border = 5;\n    const borderColor = \"#000000\";\n    const backgroundColor = \"#d2f1d9\";\n    const arrowColorLeft = \"#cece00\";\n    const arrowColorRight = \"#fefe00\";\n    const arrowW = width / 30;\n    const arrowH = height / 20;\n    const r = width / 2 - border - offset;\n    const cx = width / 2;\n    const cy = height / 2;\n    const desiredTextW = Math.round(0.8 * r); // text width is 80% of radius\n    const minTextH = 10;\n    const maxTextH = 100;\n\n    // reset identity matrix and clean up everything\n    ctx.setTransform(1, 0, 0, 1, 0, 0);\n    ctx.clearRect(0, 0, width, height);\n    ctx.translate(cx, cy);\n    ctx.rotate(initialAngle + Math.PI / 2);\n\n    // border\n    ctx.fillStyle = borderColor;\n    ctx.beginPath();\n    ctx.arc(0, 0, r + border, 0, 2 * Math.PI);\n    ctx.closePath();\n    ctx.fill();\n\n    // background\n    ctx.fillStyle = backgroundColor;\n    ctx.beginPath();\n    ctx.arc(0, 0, r, 0, 2 * Math.PI);\n    ctx.closePath();\n    ctx.fill();\n\n    for (let { title, weight, fg, bg } of items) {\n      const angle = 2 * Math.PI * weight;\n      const actualMaxTextH = Math.min(\n        maxTextH,\n        (r - desiredTextW / 2) *\n          1.6 *\n          Math.sin(Math.min(angle / 2, Math.PI / 2))\n      ); // actual maximal text height\n      // allowed because of sector size\n      const textMeasureIterationNum = Math.floor(\n        Math.log2(maxTextH - minTextH)\n      ); // number of iteration to adjust text width\n\n      ctx.fillStyle = bg;\n      ctx.strokeStype = borderColor;\n      ctx.beginPath();\n      ctx.arc(0, 0, r, 0, angle);\n      ctx.lineTo(0, 0);\n      ctx.closePath();\n      ctx.fill();\n      ctx.stroke();\n      ctx.rotate(angle / 2);\n      ctx.fillStyle = fg;\n\n      let textH = Math.round((actualMaxTextH - minTextH) / 2);\n      var step = textH / 2;\n      if (actualMaxTextH > minTextH) {\n        // if text's height fits in the sector\n        for (let i = 0; i < textMeasureIterationNum; i++) {\n          ctx.font = `${textH}px Verdana`;\n          var textW = ctx.measureText(title).width;\n          if (textW === desiredTextW) {\n            break;\n          } else if (textW < desiredTextW) {\n            textH += step;\n          } else {\n            // textW > desiredTextW)\n            textH -= step;\n          }\n          step /= 2;\n        }\n        textW = ctx.measureText(title).width;\n        //&gordon | user: знаешь что самое прекрасное в этом всем?\n        //&gordon | никто никогда не узнает что эту строчку написал я\n        //&gordon | и я буду всё отрицать\n        //&gordon | если меня кто-то будет спрашивать\n        const actualApproximateTextH = ctx.measureText(\"M\").width;\n        ctx.fillText(title, r / 2 - textW / 2, actualApproximateTextH / 2);\n      }\n      ctx.rotate(angle / 2);\n    }\n\n    ctx.setTransform(1, 0, 0, 1, 0, 0);\n    ctx.fillStyle = arrowColorLeft;\n    ctx.strokeStyle = borderColor;\n    ctx.beginPath();\n    ctx.moveTo(width / 2 - arrowW, 0);\n    ctx.lineTo(width / 2, arrowH / 3);\n    ctx.lineTo(width / 2, arrowH);\n    ctx.closePath();\n    ctx.fill();\n    ctx.stroke();\n    ctx.fillStyle = arrowColorRight;\n    ctx.beginPath();\n    ctx.moveTo(width / 2 + arrowW, 0);\n    ctx.lineTo(width / 2, arrowH / 3);\n    ctx.lineTo(width / 2, arrowH);\n    ctx.closePath();\n    ctx.fill();\n    ctx.stroke();\n  };\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext(\"2d\");\n\n    draw(context, offset);\n    // eslint-disable-next-line\n  }, [items]);\n\n  return (\n    <Segment raised>\n      <Rail attached internal position=\"left\" close=\"very\">\n        <Segment compact>\n          <Header as=\"h3\" textAlign=\"center\" content=\"Drag the wheel!\" />\n        </Segment>\n      </Rail>\n      <canvas\n        ref={canvasRef}\n        onClick={onSpin}\n        width={`${width}px`}\n        height={`${height}px`}\n      >\n        {\" \"}\n        Your browser does not seem to be supporting Canvas API\n      </canvas>\n      <Modal open={resultModalOpen} onClose={() => setResultModalOpen(false)}>\n        <Modal.Header content=\"Result\" />\n        <Modal.Content>\n          <Modal.Description>\n            <Header\n              size=\"huge\"\n              textAlign=\"center\"\n              content={`${result.title} (${toPercent(result.weight)})`}\n            />\n          </Modal.Description>\n        </Modal.Content>\n        <Modal.Actions>\n          <Button\n            content=\"Great!\"\n            labelPosition=\"right\"\n            icon=\"checkmark\"\n            onClick={() => setResultModalOpen(false)}\n            positive\n          />\n        </Modal.Actions>\n      </Modal>\n    </Segment>\n  );\n};\n\nexport { Wheel };\n","import \"./App.css\";\n\nimport \"fomantic-ui-css/semantic.css\";\nimport { Container, Divider, Grid, Header } from \"semantic-ui-react\";\n\nimport { ItemList } from \"./items\";\nimport { History } from \"./history\";\nimport { Wheel } from \"./wheel\";\n\nconst App = () => {\n  return (\n    <Container fluid className=\"main-container\">\n      <Header size=\"huge\" textAlign=\"center\">\n        <Header.Content>Wheel of Unfortunate</Header.Content>\n      </Header>\n      <Grid columns={2}>\n        <Grid.Column width={10} textAlign=\"center\">\n          <Wheel />\n        </Grid.Column>\n        <Grid.Column width={6}>\n          <ItemList />\n        </Grid.Column>\n      </Grid>\n      <Divider horizontal />\n      <Container>\n        <History />\n      </Container>\n    </Container>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport StoreProvider from \"./store\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <StoreProvider>\n      <App />\n    </StoreProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}