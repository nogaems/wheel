{"version":3,"sources":["utils.js","store.js","items.js","history.js","wheel.js","App.js","reportWebVitals.js","index.js"],"names":["title","a","encoder","TextEncoder","data","encode","crypto","subtle","digest","hash","assignColors","setter","digestTitle","then","hex","Array","from","Uint8Array","map","b","toString","padStart","join","slice","length","fg","bg","Number","parseInt","toPercent","prob","toFixed","calcUnassignedProbability","items","reduce","previous","weight","isAlreadyAdded","item","list","filter","StoreContext","createContext","StoreProvider","children","useState","JSON","parse","localStorage","getItem","setItems","history","setHistory","unassignedProbability","setUnassignedProbability","store","useEffect","newUnassignedProbability","setItem","stringify","Provider","value","minProb","probStep","Item","index","useContext","deleteConfirmOpened","setDeleteConfirmOpened","editOpened","setEditOpened","maxWeight","newTitle","setNewTitle","newWeight","setNewWeight","newColors","setNewColors","error","setError","saving","setSaving","newItems","Grid","Row","Column","width","Label","style","color","backgroundColor","alignSelf","size","Button","Group","compact","floated","icon","onClick","Confirm","open","onConfirm","splice","onCancel","Modal","onClose","Header","Content","Form","inline","Field","type","control","defaultValue","label","onChange","e","target","min","max","step","parseFloat","Message","content","Dimmer","active","Loader","Actions","labelPosition","positive","Divider","fitted","ItemAddForm","setTitle","setWeight","colors","setColors","addEnabled","setAddEnabled","weightFloat","Math","abs","isFulfilled","debouncedSetColors","useCallback","debounce","onSubmit","grouped","Input","placeholder","disabled","ItemList","eraseConfirmOpened","setEraseConfirmOpened","filePickerOpened","setFilePickerOpened","filePickerError","setFilePickerError","fileToImport","setFileToImport","onImport","fetch","res","json","catch","elements","Segment","raised","Dropdown","button","className","fluid","textAlign","Menu","text","serialized","file","Blob","document","createElement","url","URL","createObjectURL","href","download","body","appendChild","click","setTimeout","removeChild","window","revokeObjectURL","as","attached","onOpen","Icon","name","Container","Description","inverted","section","HistoryItem","ts","columns","Date","toLocaleString","tsToString","History","floor","random","Wheel","height","result","setResult","resultModalOpen","setResultModalOpen","canvasRef","useRef","ctx","initialAngle","border","borderColor","arrowColorLeft","arrowColorRight","arrowW","arrowH","r","cx","cy","desiredTextW","round","minTextH","maxTextH","setTransform","clearRect","translate","rotate","fillStyle","beginPath","arc","PI","closePath","fill","angle","actualMaxTextH","sin","textMeasureIterationNum","log2","strokeStype","lineTo","stroke","textH","i","font","textW","measureText","actualApproximateTextH","fillText","strokeStyle","moveTo","draw","current","getContext","ref","sum","weightedRandom","histItem","App","horizontal","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.5b3f9a74.chunk.js","sourcesContent":["async function digestTitle(title) {\n  const encoder = new TextEncoder();\n  const data = encoder.encode(title);\n  const hash = await crypto.subtle.digest(\"SHA-256\", data);\n  return hash;\n}\n\nfunction assignColors(title, setter) {\n  digestTitle(title).then((hash) => {\n    const hashArray = Array.from(new Uint8Array(hash));\n    let hex = hashArray.map((b) => b.toString(16).padStart(2, \"0\")).join(\"\");\n    hex = hex.slice(hex.length - 6, hex.length);\n    const fg = `#${hex}`;\n    const bg = `#${(~Number.parseInt(hex, 16) & 0xffffff).toString(16)}`;\n    setter([fg, bg]);\n  });\n}\n\nconst toPercent = (prob) => (prob * 100).toFixed(2);\n\nconst calcUnassignedProbability = (items) => {\n  return (\n    1 -\n    items.reduce((previous, { weight: current }) => {\n      return previous + current;\n    }, 0)\n  );\n};\n\nconst isAlreadyAdded = (item, list) => {\n  return list.filter(({ title }) => item === title).length === 1;\n};\n\nconst weightedRandom = (items) => {\n  let sum = 0;\n  let r = Math.random();\n  for (let { title, weight } of items) {\n    sum += weight;\n    if (r <= sum) return { title, weight };\n  }\n};\n\nexport {\n  assignColors,\n  toPercent,\n  calcUnassignedProbability,\n  isAlreadyAdded,\n  weightedRandom,\n};\n","import { createContext, useEffect, useState } from \"react\";\nimport { calcUnassignedProbability } from \"./utils\";\n\nexport const StoreContext = createContext(null);\n\nexport default function StoreProvider({ children }) {\n  const [items, setItems] = useState(\n    JSON.parse(localStorage.getItem(\"items\")) || []\n  );\n  const [history, setHistory] = useState(\n    JSON.parse(localStorage.getItem(\"history\")) || []\n  );\n  const [unassignedProbability, setUnassignedProbability] = useState(\n    calcUnassignedProbability(items)\n  );\n\n  const store = {\n    items: [items, setItems],\n    history: [history, setHistory],\n    unassignedProbability,\n  };\n\n  useEffect(() => {\n    const newUnassignedProbability = calcUnassignedProbability(items);\n    setUnassignedProbability(newUnassignedProbability);\n    localStorage.setItem(\"items\", JSON.stringify(items));\n  }, [items]);\n  useEffect(() => {\n    localStorage.setItem(\"history\", JSON.stringify(history));\n  }, [history]);\n\n  return (\n    <StoreContext.Provider value={store}>{children}</StoreContext.Provider>\n  );\n}\n","import { debounce } from \"lodash\";\nimport { useCallback, useContext, useEffect, useState } from \"react\";\nimport {\n  Button,\n  Divider,\n  Form,\n  Grid,\n  Header,\n  Label,\n  Message,\n  Segment,\n  Confirm,\n  Dropdown,\n  Modal,\n  Icon,\n  Container,\n  Dimmer,\n  Loader,\n} from \"semantic-ui-react\";\n\nimport { StoreContext } from \"./store\";\nimport { assignColors, toPercent, isAlreadyAdded } from \"./utils\";\n\nconst minProb = 0.0001;\nconst probStep = 0.0001;\nconst epsilon = 0.0001;\n\nconst isFulfilled = (unassignedProbability) => {\n  return Math.abs(unassignedProbability) < epsilon;\n};\n\nconst Item = ({ index, title, fg, bg, weight }) => {\n  const {\n    items: [items, setItems],\n    unassignedProbability,\n  } = useContext(StoreContext);\n\n  const [deleteConfirmOpened, setDeleteConfirmOpened] = useState(false);\n  const [editOpened, setEditOpened] = useState(false);\n\n  const maxWeight = weight + unassignedProbability;\n\n  const [newTitle, setNewTitle] = useState(title);\n  const [newWeight, setNewWeight] = useState(weight);\n  const [newColors, setNewColors] = useState([null, null]);\n\n  const [error, setError] = useState(\"\");\n  const [saving, setSaving] = useState(false);\n\n  const onEdit = () => {\n    setSaving(true);\n    assignColors(newTitle, setNewColors);\n  };\n\n  useEffect(() => {\n    if (title !== newTitle && isAlreadyAdded(newTitle, items)) {\n      setSaving(false);\n      setError(\"It's already on the list\");\n      return;\n    }\n    if (!newColors[0] || !newColors[1]) return;\n    const newItems = [...items];\n    const item = newItems[index];\n    item.title = newTitle;\n    item.weight = newWeight;\n    [item.fg, item.bg] = newColors;\n    setItems(newItems);\n    setSaving(false);\n    setEditOpened(false);\n    // eslint-disable-next-line\n  }, [newColors]);\n\n  const onDelete = () => {\n    const newItems = items;\n    newItems.splice(index, 1);\n    setItems([...newItems]);\n    setDeleteConfirmOpened(false);\n  };\n\n  return (\n    <>\n      <Grid.Row>\n        <Grid.Column width={14}>\n          <Label\n            style={{ color: fg, backgroundColor: bg, alignSelf: \"flex-start\" }}\n            size=\"large\"\n          >\n            {`${index + 1}) ${title} (${toPercent(weight)}%)`}\n          </Label>\n        </Grid.Column>\n        <Grid.Column width={2}>\n          <Button.Group compact floated=\"right\">\n            <Button\n              size=\"mini\"\n              icon=\"edit outline\"\n              onClick={() => setEditOpened(true)}\n            />\n            <Button\n              size=\"mini\"\n              color=\"red\"\n              icon=\"delete\"\n              onClick={() => setDeleteConfirmOpened(true)}\n            />\n            <Confirm\n              open={deleteConfirmOpened}\n              onConfirm={onDelete}\n              onCancel={() => setDeleteConfirmOpened(false)}\n            />\n            <Modal onClose={() => setEditOpened(false)} open={editOpened}>\n              <Modal.Header>Edit</Modal.Header>\n              <Modal.Content>\n                <Form error>\n                  <Form.Group inline>\n                    <Form.Field\n                      type=\"text\"\n                      control=\"input\"\n                      defaultValue={title}\n                      label=\"Title\"\n                      onChange={(e) => setNewTitle(e.target.value)}\n                    />\n                    <Form.Field\n                      type=\"range\"\n                      control=\"input\"\n                      label=\"Probability\"\n                      min={minProb}\n                      max={maxWeight}\n                      step={probStep}\n                      defaultValue={weight}\n                      onChange={(e) =>\n                        setNewWeight(Number.parseFloat(e.target.value))\n                      }\n                    />\n                    {toPercent(newWeight)}%\n                  </Form.Group>\n                  {error && <Message error content={error} />}\n                </Form>\n                <Dimmer active={saving}>\n                  <Loader content=\"Saving\" />\n                </Dimmer>\n              </Modal.Content>\n              <Modal.Actions>\n                <Button color=\"black\" onClick={() => setEditOpened(false)}>\n                  Cancel\n                </Button>\n                <Button\n                  content=\"Save\"\n                  labelPosition=\"right\"\n                  icon=\"checkmark\"\n                  onClick={() => onEdit()}\n                  positive\n                />\n              </Modal.Actions>\n            </Modal>\n          </Button.Group>\n        </Grid.Column>\n      </Grid.Row>\n      <Divider fitted />\n    </>\n  );\n};\n\nconst ItemAddForm = () => {\n  const {\n    items: [items, setItems],\n    unassignedProbability,\n  } = useContext(StoreContext);\n\n  const [title, setTitle] = useState(\"\");\n  const [weight, setWeight] = useState(minProb);\n  const [colors, setColors] = useState([null, null]);\n  const [addEnabled, setAddEnabled] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const weightFloat = Number.parseFloat(weight);\n    if (!(title && weightFloat)) {\n      setAddEnabled(false);\n      return;\n    }\n    if (isFulfilled(unassignedProbability)) {\n      setError(\"The total probability of specified events has reached 100%\");\n      setAddEnabled(false);\n      return;\n    }\n    const [fg, bg] = colors;\n    if (!(fg && bg)) return;\n    // eslint-disable-next-line\n  }, [title, weight, colors, unassignedProbability]);\n\n  // eslint-disable-next-line\n  const debouncedSetColors = useCallback(\n    debounce((title) => {\n      if (isAlreadyAdded(title, items)) {\n        setError(\"It's already on the list\");\n        return;\n      }\n      assignColors(title, setColors);\n      setAddEnabled(true);\n    }, 300),\n    [items]\n  );\n\n  const onTitleChange = (e) => {\n    setAddEnabled(false);\n    const value = e.target.value;\n    setTitle(value);\n    if (!value) {\n      setError(\"Title must be non-empty\");\n      return;\n    } else {\n      setError(\"\");\n    }\n    debouncedSetColors(value);\n  };\n\n  const onAdd = () => {\n    const [fg, bg] = colors;\n    const item = { title, weight, fg, bg };\n    setItems([...items, item]);\n    setTitle(\"\");\n    setWeight(minProb);\n    setAddEnabled(false);\n    setError(null);\n  };\n\n  return (\n    <Form onSubmit={onAdd} error>\n      <Form.Group grouped>\n        <Form.Input\n          type=\"text\"\n          label=\"Title\"\n          placeholder=\"thing to do\"\n          value={title}\n          onChange={onTitleChange}\n        />\n        <Form.Field\n          type=\"range\"\n          control=\"input\"\n          min={minProb}\n          max={unassignedProbability}\n          step={probStep}\n          label=\"Probability\"\n          value={weight}\n          onChange={(e) => setWeight(Number.parseFloat(e.target.value))}\n        />\n        {`${toPercent(weight)}%`}\n        <Form.Button\n          positive\n          size=\"large\"\n          disabled={!addEnabled}\n          icon=\"add\"\n        />{\" \"}\n      </Form.Group>\n      {error && <Message error content={error} />}\n    </Form>\n  );\n};\n\nconst ItemList = () => {\n  const {\n    items: [items, setItems],\n    history: [history, setHistory],\n  } = useContext(StoreContext);\n\n  const [eraseConfirmOpened, setEraseConfirmOpened] = useState(false);\n  const [filePickerOpened, setFilePickerOpened] = useState(false);\n  const [filePickerError, setFilePickerError] = useState(\"\");\n  const [fileToImport, setFileToImport] = useState(null);\n\n  const onImport = () => {\n    if (!fileToImport) {\n      setFilePickerError(\"You should pick a file\");\n      return;\n    }\n    fetch(fileToImport)\n      .then((res) => res.json())\n      .then(({ items, history }) => {\n        setItems(items);\n        setHistory(history);\n        setFilePickerOpened(false);\n      })\n      .catch(() => {\n        setFilePickerError(\n          \"Failed to fetch specified URL or parse its contents as JSON\"\n        );\n      });\n  };\n\n  const onExport = () => {\n    const data = { items, history };\n    const serialized = JSON.stringify(data);\n    const file = new Blob([serialized], { type: \"application/json\" });\n    let a = document.createElement(\"a\");\n    const url = URL.createObjectURL(file);\n    a.href = url;\n    a.download = \"wheel.json\";\n    document.body.appendChild(a);\n    a.click();\n    setTimeout(function () {\n      document.body.removeChild(a);\n      window.URL.revokeObjectURL(url);\n    }, 0);\n  };\n\n  const onErase = () => {\n    setEraseConfirmOpened(false);\n    setItems([]);\n    setHistory([]);\n  };\n\n  const elements = items.map(({ title, fg, bg, weight }, index) => (\n    <Item\n      key={index}\n      index={index}\n      title={title}\n      fg={fg}\n      bg={bg}\n      weight={weight}\n    />\n  ));\n\n  return (\n    <Segment raised>\n      <Grid>\n        <Grid.Column width={14}>\n          <Header\n            size=\"medium\"\n            content=\"The things that are about to happen:\"\n          />\n        </Grid.Column>\n        <Grid.Column width={2}>\n          <Dropdown\n            button\n            icon=\"wrench\"\n            className=\"icon\"\n            fluid\n            style={{ textAlign: \"center\" }}\n          >\n            <Dropdown.Menu>\n              <Dropdown.Item\n                icon=\"download\"\n                text=\"Import\"\n                onClick={() => setFilePickerOpened(true)}\n              />\n              <Dropdown.Item icon=\"upload\" text=\"Export\" onClick={onExport} />\n              <Dropdown.Item\n                icon=\"eraser\"\n                text=\"Erase\"\n                onClick={() => setEraseConfirmOpened(true)}\n                as={Button}\n                fluid\n                attached=\"bottom\"\n                color=\"red\"\n              />\n              <Confirm\n                open={eraseConfirmOpened}\n                onCancel={() => setEraseConfirmOpened(false)}\n                onConfirm={onErase}\n              ></Confirm>\n              <Modal\n                open={filePickerOpened}\n                onClose={() => setFilePickerOpened(false)}\n                onOpen={() => setFilePickerOpened(true)}\n              >\n                <Header icon>\n                  <Icon name=\"download\" />\n                  Pick a file\n                </Header>\n                <Modal.Content>\n                  <Container textAlign=\"center\">\n                    <Modal.Description>\n                      <p>\n                        Due to the restrictions caused by security reasons you\n                        cannot use local files directly and you have to upload\n                        it somewhere first.\n                      </p>\n                      <p>\n                        Note that there is no input file validation performed,\n                        so modifying it would be on your own risk.\n                      </p>\n                    </Modal.Description>\n                    <Divider />\n                    <Form error onSubmit={() => onImport()}>\n                      <Form.Input\n                        type=\"text\"\n                        label=\"Link:\"\n                        placeholder=\"https://example.com/wheel.json\"\n                        value={fileToImport}\n                        onChange={(e) => setFileToImport(e.target.value)}\n                      />\n                      {filePickerError && (\n                        <Message error content={filePickerError} />\n                      )}\n                    </Form>\n                  </Container>\n                </Modal.Content>\n                <Modal.Actions>\n                  <Button\n                    color=\"red\"\n                    inverted\n                    onClick={() => setFilePickerOpened(false)}\n                  >\n                    <Icon name=\"remove\" /> Cancel\n                  </Button>\n                  <Button color=\"green\" inverted onClick={() => onImport()}>\n                    <Icon name=\"checkmark\" /> OK\n                  </Button>\n                </Modal.Actions>\n              </Modal>\n            </Dropdown.Menu>\n          </Dropdown>\n        </Grid.Column>\n      </Grid>\n      <Divider section />\n      {elements.length === 0 ? (\n        <Header\n          textAlign=\"center\"\n          size=\"tiny\"\n          content=\"Nothing's on the list yet\"\n        />\n      ) : (\n        <Grid>{elements}</Grid>\n      )}\n      <ItemAddForm />\n    </Segment>\n  );\n};\nexport { ItemList };\n","import { StoreContext } from \"./store.js\";\nimport { toPercent } from \"./utils.js\";\nimport { useContext } from \"react\";\nimport { Header, Container, Segment, Grid } from \"semantic-ui-react\";\n\nconst HistoryItem = ({ ts, title, weight }) => {\n  const tsToString = (ts) => {\n    const date = new Date(ts);\n    return date.toLocaleString();\n  };\n\n  return (\n    <Grid.Row columns={1}>\n      <Grid.Column>\n        {`${tsToString(ts)}: ${title} (${toPercent(weight)}%)`}\n      </Grid.Column>\n    </Grid.Row>\n  );\n};\n\nconst History = () => {\n  const {\n    history: [history],\n  } = useContext(StoreContext);\n  const elements = history.map(({ ts, title, weight }) => (\n    <HistoryItem\n      key={Math.floor(ts * Math.random())}\n      ts={ts}\n      title={title}\n      weight={weight}\n    />\n  ));\n  return (\n    <Segment raised>\n      <Container>\n        <Header size=\"medium\" textAlign=\"center\" content=\"History of spins:\" />\n        {elements.length === 0 ? (\n          <Header textAlign=\"center\" size=\"tiny\" content=\"Empty\" />\n        ) : (\n          <Grid>{elements}</Grid>\n        )}\n      </Container>\n    </Segment>\n  );\n};\n\nexport { History };\n","import { useContext, useEffect, useRef, useState } from \"react\";\nimport { Button, Container, Header, Modal, Segment } from \"semantic-ui-react\";\n\nimport { StoreContext } from \"./store\";\nimport { toPercent, weightedRandom } from \"./utils\";\n\nconst Wheel = () => {\n  const {\n    items: [items],\n    history: [history, setHistory],\n  } = useContext(StoreContext);\n\n  const [width, height] = [750, 750];\n\n  const [result, setResult] = useState({ title: null, weight: null });\n  const [resultModalOpen, setResultModalOpen] = useState(false);\n\n  const [spinning, setSpinning] = useState(false);\n  const [getsDragged, setGetsDragged] = useState(false);\n\n  const canvasRef = useRef(null);\n\n  const onSpin = () => {\n    if (items.length < 1) return;\n    const { title, weight } = weightedRandom(items);\n    setResult({ title, weight });\n    const histItem = { ts: Date.parse(Date()), title, weight };\n    setHistory([histItem, ...history]);\n    setResultModalOpen(true);\n  };\n\n  const draw = (ctx, initialAngle = 0) => {\n    const offset = width / 60;\n    const border = 5;\n    const borderColor = \"#000000\";\n    const arrowColorLeft = \"#cece00\";\n    const arrowColorRight = \"#fefe00\";\n    const arrowW = width / 30;\n    const arrowH = height / 20;\n    const r = width / 2 - border - offset;\n    const cx = width / 2;\n    const cy = height / 2;\n    const desiredTextW = Math.round(0.8 * r); // text width is 80% of radius\n    const minTextH = 10;\n    const maxTextH = 100;\n\n    ctx.setTransform(1, 0, 0, 1, 0, 0);\n    ctx.clearRect(0, 0, width, height);\n    ctx.translate(cx, cy);\n    ctx.rotate(initialAngle);\n\n    ctx.fillStyle = borderColor;\n    ctx.beginPath();\n    ctx.arc(0, 0, r + border, 0, 2 * Math.PI);\n    ctx.closePath();\n    ctx.fill();\n\n    for (let { title, weight, fg, bg } of items) {\n      const angle = 2 * Math.PI * weight;\n      const actualMaxTextH = Math.min(\n        maxTextH,\n        (r - desiredTextW / 2) *\n          1.6 *\n          Math.sin(Math.min(angle / 2, Math.PI / 2))\n      ); // actual maximal text height\n      // allowed because of sector size\n      const textMeasureIterationNum = Math.floor(\n        Math.log2(maxTextH - minTextH)\n      ); // number of iteration to adjust text width\n\n      ctx.fillStyle = bg;\n      ctx.strokeStype = borderColor;\n      ctx.beginPath();\n      ctx.arc(0, 0, r, 0, angle);\n      ctx.lineTo(0, 0);\n      ctx.closePath();\n      ctx.fill();\n      ctx.stroke();\n      ctx.rotate(angle / 2);\n      ctx.fillStyle = fg;\n\n      let textH = Math.round((actualMaxTextH - minTextH) / 2);\n      var step = textH / 2;\n      if (actualMaxTextH > minTextH) {\n        // if text's height fits in the sector\n        for (let i = 0; i < textMeasureIterationNum; i++) {\n          ctx.font = `${textH}px Verdana`;\n          var textW = ctx.measureText(title).width;\n          if (textW === desiredTextW) {\n            break;\n          } else if (textW < desiredTextW) {\n            textH += step;\n          } else {\n            // textW > desiredTextW)\n            textH -= step;\n          }\n          step /= 2;\n        }\n        textW = ctx.measureText(title).width;\n        const actualApproximateTextH = ctx.measureText(\"M\").width;\n        //&gordon | user: знаешь что самое прекрасное в этом всем?\n        //&gordon | никто никогда не узнает что эту строчку написал я https://github.com/nogaems/wheel/blob/master/src/wheel.js#L100\n        //&gordon | и я буду всё отрицать\n        //&gordon | если меня кто-то будет спрашивать\n        ctx.fillText(title, r / 2 - textW / 2, actualApproximateTextH / 2);\n      }\n      ctx.rotate(angle / 2);\n    }\n\n    ctx.setTransform(1, 0, 0, 1, 0, 0);\n    ctx.fillStyle = arrowColorLeft;\n    ctx.strokeStyle = borderColor;\n    ctx.beginPath();\n    ctx.moveTo(width / 2 - arrowW, 0);\n    ctx.lineTo(width / 2, arrowH / 3);\n    ctx.lineTo(width / 2, arrowH);\n    ctx.closePath();\n    ctx.fill();\n    ctx.stroke();\n    ctx.fillStyle = arrowColorRight;\n    ctx.beginPath();\n    ctx.moveTo(width / 2 + arrowW, 0);\n    ctx.lineTo(width / 2, arrowH / 3);\n    ctx.lineTo(width / 2, arrowH);\n    ctx.closePath();\n    ctx.fill();\n    ctx.stroke();\n  };\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext(\"2d\");\n\n    draw(context, Math.PI);\n    // eslint-disable-next-line\n  }, [items]);\n\n  return (\n    <Segment raised>\n      <Container text>\n        <Header size=\"medium\" textAlign=\"center\" content=\"Drag the wheel!\" />\n        <canvas\n          ref={canvasRef}\n          onClick={onSpin}\n          width={`${width}px`}\n          height={`${height}px`}\n        >\n          {\" \"}\n          Your browser does not seem to be supporting Canvas API\n        </canvas>\n      </Container>\n      <Modal open={resultModalOpen} onClose={() => setResultModalOpen(false)}>\n        <Modal.Header content=\"Result\" />\n        <Modal.Content>\n          <Modal.Description>\n            <Header\n              size=\"huge\"\n              textAlign=\"center\"\n              content={`${result.title} (${toPercent(result.weight)}%)`}\n            />\n          </Modal.Description>\n        </Modal.Content>\n        <Modal.Actions>\n          <Button\n            content=\"Great!\"\n            labelPosition=\"right\"\n            icon=\"checkmark\"\n            onClick={() => setResultModalOpen(false)}\n            positive\n          />\n        </Modal.Actions>\n      </Modal>\n    </Segment>\n  );\n};\n\nexport { Wheel };\n","import \"./App.css\";\n\nimport \"fomantic-ui-css/semantic.css\";\nimport { Container, Divider, Grid, Header } from \"semantic-ui-react\";\n\nimport { ItemList } from \"./items\";\nimport { History } from \"./history\";\nimport { Wheel } from \"./wheel\";\n\nconst App = () => {\n  return (\n    <Container fluid className=\"main-container\">\n      <Header size=\"huge\" textAlign=\"center\">\n        <Header.Content>Wheel of Unfortunate</Header.Content>\n      </Header>\n      <Grid columns={2}>\n        <Grid.Column width={9}>\n          <Wheel />\n        </Grid.Column>\n        <Grid.Column width={7}>\n          <ItemList />\n        </Grid.Column>\n      </Grid>\n      <Divider horizontal />\n      <Container>\n        <History />\n      </Container>\n    </Container>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport StoreProvider from \"./store\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <StoreProvider>\n      <App />\n    </StoreProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}